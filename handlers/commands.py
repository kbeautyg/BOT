# handlers/commands.py

import logging
from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession # –ò–º–ø–æ—Ä—Ç –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
from aiogram.utils.markdown import escape_md, markdown_bold # –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

# –ò–º–ø–æ—Ä—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
from handlers.post_creation_fsm_states import PostCreationStates
from handlers.post_management_fsm_states import PostManagementStates
from handlers.rss_integration_fsm_states import RssIntegrationStates

# –ò–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
from services.db import get_or_create_user
from keyboards.reply_keyboards import get_main_menu_keyboard, get_cancel_keyboard # –ò–º–ø–æ—Ä—Ç get_cancel_keyboard


# --- Logging Setup ---
logger = logging.getLogger(__name__)

# --- Router Initialization ---
router = Router()

# --- Handlers ---

@router.message(CommandStart())
async def handle_start(
    message: Message,
    state: FSMContext,
    session: AsyncSession # Inject database session via middleware/DI
) -> None:
    """
    Handles the /start command. Welcomes the user, gets/creates user in DB,
    resets state, and shows the main menu keyboard.
    """
    user_id = message.from_user.id
    logger.info(f"User {user_id} started the bot.")
    await state.clear() # Clear any previous FSM state

    # Get or create user in the database
    # Pass potential defaults like username, first_name, last_name
    # telegram_user_id must be an integer
    user = await get_or_create_user(session, user_id, defaults={
        'telegram_user_id': user_id, # Redundant as it's the primary key argument, but good to include
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name
        # Default preferred_mode and timezone are set in the User model
    })
    logger.info(f"User DB entry for Telegram ID {user.telegram_user_id} (DB ID: {user.id}) processed.")

    # Use escape_md for user's first name in case it contains MarkdownV2 special characters
    safe_first_name = escape_md(message.from_user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, *{safe_first_name}*\\!\n\\n"
        "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ Telegram\\-–∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã, "
        "–∞ —Ç–∞–∫–∂–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RSS\\-–ª–µ–Ω—Ç\\.\\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞\\."
    )

    await message.answer(
        welcome_message,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="MarkdownV2" # Use MarkdownV2 for welcome message
    )

@router.message(Command("help") | F.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_help(
    message: Message,
    state: FSMContext
) -> None:
    """
    Handles the /help command or the '‚ùì –ü–æ–º–æ—â—å' button.
    Provides detailed help information and resets state.
    """
    logger.info(f"User {message.from_user.id} requested help.")
    await state.clear() # Clear any previous FSM state

    help_text = (
        "*–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\\:*\n\\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö, "
        "–∞ —Ç–∞–∫–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS\\-–ª–µ–Ω—Ç\\.\n\\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã\\:*\n"
        f"\\- `{markdown_bold('/start')}`\\: –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\\.\n"
        f"\\- `{markdown_bold('/help')}` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ \"‚ùì –ü–æ–º–æ—â—å\": –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\\.\n"
        f"\\- `{markdown_bold('/newpost')}` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ \"‚ûï –ù–æ–≤—ã–π –ø–æ—Å—Ç\": –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º, –º–µ–¥–∏–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º\\.\n"
        f"\\- `{markdown_bold('/myposts')}` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ \"üóÇ –ú–æ–∏ –ø–æ—Å—Ç—ã\": –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏ \$—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª–∏—Ç—å, –æ—Ç–º–µ–Ω–∏—Ç—å\$.\\n"
        f"\\- `{markdown_bold('/addrss')}` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ \"üì∞ –î–æ–±–∞–≤–∏—Ç—å RSS\": –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π RSS\\-–ª–µ–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\\.\n\\n"
        "*–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è RSS\\:*\n"
        "\\- –ö–Ω–æ–ø–∫–∞ \"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å\" –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ `/cancel`\\: –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\\.\n\\n"
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –∫–∞–Ω–∞–ª–∞—Ö/–≥—Ä—É–ø–ø–∞—Ö, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å, —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ \$–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –º–µ–¥–∏–∞, —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ç\\.–ø\\.\$\\.\n\\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∏–∂–µ\\."
    )

    await message.answer(
        help_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="MarkdownV2" # Use MarkdownV2 for help text
    )

# Note: /newpost, /myposts, /addrss commands primarily set the state and are handled
# in the respective state handlers (e.g., handlers/post_creation.py).
# The handlers below in commands.py are simplified entry points.

@router.message(Command("newpost") | F.text == "‚ûï –ù–æ–≤—ã–π –ø–æ—Å—Ç")
async def handle_new_post(
    message: Message,
    state: FSMContext
) -> None:
    """
    Handles the /newpost command or the '‚ûï –ù–æ–≤—ã–π –ø–æ—Å—Ç' button.
    Starts the post creation FSM.
    """
    logger.info(f"User {message.from_user.id} initiated new post creation.")
    # Clear previous state and set the new one
    await state.clear()
    await state.set_state(PostCreationStates.waiting_for_text)

    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞\\. –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram \$MarkdownV2 –∏–ª–∏ HTML\$\\.\\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å\" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\\.",
        reply_markup=get_cancel_keyboard(), # Provide a cancel keyboard
        parse_mode="MarkdownV2"
    )

@router.message(Command("myposts") | F.text == "üóÇ –ú–æ–∏ –ø–æ—Å—Ç—ã")
async def handle_my_posts(
    message: Message,
    state: FSMContext
) -> None:
    """
    Handles the /myposts command or the 'üóÇ –ú–æ–∏ –ø–æ—Å—Ç—ã' button.
    Starts the post management FSM.
    The listing logic is handled by the state entry handler in post_management.py.
    """
    logger.info(f"User {message.from_user.id} initiated post management.")
    # Clear previous state and set the new one
    await state.clear()
    await state.set_state(PostManagementStates.showing_list)

    # The state handler for showing_list in post_management.py will fetch and display posts.
    # Send an initial acknowledgment message.
    await message.answer(
        "–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –ø–æ—Å—Ç—ã\\.\\.\\.",
        reply_markup=None, # Remove reply keyboard while inline keyboards are shown
        parse_mode="MarkdownV2"
    )


@router.message(Command("addrss") | F.text == "üì∞ –î–æ–±–∞–≤–∏—Ç—å RSS")
async def handle_add_rss(
    message: Message,
    state: FSMContext
) -> None:
    """
    Handles the /addrss command or the 'üì∞ –î–æ–±–∞–≤–∏—Ç—å RSS' button.
    Starts the RSS integration FSM.
    """
    logger.info(f"User {message.from_user.id} initiated RSS feed addition.")
    # Clear previous state and set the new one
    await state.clear()
    await state.set_state(RssIntegrationStates.waiting_for_url)

    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL RSS\\-–ª–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å\\.\\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å\" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\\.",
        reply_markup=get_cancel_keyboard(), # Provide a cancel keyboard
        parse_mode="MarkdownV2"
    )

# Generic cancel handler for any state.
# Specific cancel handlers in other modules might override this for cleanup.
@router.message(Command("cancel") | F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def handle_cancel_generic(
    message: Message,
    state: FSMContext
) -> None:
    """
    Handles the /cancel command or the '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' button generically.
    Clears the current FSM state and returns to the main menu.
    Specific handlers might override this if cleanup is needed.
    """
    current_state = await state.get_state()
    if current_state is None:
        await message.answer(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã\\.",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="MarkdownV2"
        )
        return

    logger.info(f"User {message.from_user.id} canceled state {current_state}.")
    await state.clear()

    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\\. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\\.",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="MarkdownV2"
    )

# --- End of Handlers ---

# This router instance will be included in the main dispatcher
# Example in your bot.py:
# from aiogram import Dispatcher, Bot
# from services.db import AsyncSessionLocal # Ensure this is available
# from .handlers import commands, post_creation, post_management, rss_integration, inline_buttons # Import routers

# async def main():
#     bot = Bot(token="YOUR_BOT_TOKEN")
#     dp = Dispatcher()

#     # Include routers - order matters for overriding handlers (e.g., cancel)
#     # Include more specific routers first
#     dp.include_router(post_creation.router) # Includes specific cancel handler
#     dp.include_router(post_management.post_management_router) # Includes specific cancel handler
#     dp.include_router(rss_integration.rss_integration_router) # Includes specific cancel handler
#     dp.include_router(inline_buttons.inline_buttons_router) # Handles inline button callbacks
#     dp.include_router(commands.router) # Includes generic commands and the generic cancel

#     # Register middleware or pass dependencies to handlers
#     # Example using a simple middleware to pass session and scheduler
#     # from bot import setup_middlewares # Assuming middleware setup function
#     # setup_middlewares(dp, AsyncSessionLocal, scheduler_instance) # Assuming scheduler_instance is initialized

#     await dp.start_polling(bot, session_factory=AsyncSessionLocal) # Pass sessionmaker for DI of AsyncSession

# if __name__ == "__main__":
#     # Ensure DB and Scheduler are initialized before running main
#     # import asyncio
#     # from services.db import init_db, async_engine
#     # from services.scheduler import init_scheduler, restore_scheduled_jobs
#     # async def startup():
#     #     await init_db()
#     #     bot_instance_for_scheduler = Bot(token="YOUR_BOT_TOKEN")
#     #     # Assume scheduler_instance is initialized globally or passed correctly
#     #     global scheduler_instance # Example for global access
#     #     scheduler_instance = init_scheduler(async_engine, bot_instance_for_scheduler)
#     #     # restore_scheduled_jobs needs bot, scheduler, session_factory
#     #     await restore_scheduled_jobs(scheduler_instance, bot_instance_for_scheduler, AsyncSessionLocal)
#     #     await bot_instance_for_scheduler.session.close() # Close session if bot was just for scheduler init
#     #
#     # asyncio.run(startup())
#     # asyncio.run(main())
#     pass # Keep the file as a clean module

