# --------------------------- main.py (–ß–ê–°–¢–¨ 1/4) ---------------------------
"""
FULL MONOLITH TELEGRAM BOT
- Aiogram 3.x
- Supabase (PostgREST) backend
- FSM-wizard –¥–ª—è –ø–æ—Å—Ç–æ–≤
- –ú—É–ª—å—Ç–∏-–ø—Ä–æ–µ–∫—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
- –î–≤—É—Ö—è–∑—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (ru / en)
–ê–≤—Ç–æ—Ä—Å—Ç–≤–æ: —Ç–≤–æ–π –ª–∏—á–Ω—ã–π ChatGPT-—Ä–∞–± :)
"""

import os
import json
import re
import asyncio
from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from supabase import create_client, Client
from dotenv import load_dotenv

# ---------------------------------------------------------------------------
# 1. CONFIG & INIT
# ---------------------------------------------------------------------------
load_dotenv()  # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º .env

BOT_TOKEN      = os.getenv("BOT_TOKEN")
SUPABASE_URL   = os.getenv("SUPABASE_URL")
SUPABASE_KEY   = os.getenv("SUPABASE_KEY")

if not all((BOT_TOKEN, SUPABASE_URL, SUPABASE_KEY)):
    raise SystemExit("‚ùå  BOT_TOKEN / SUPABASE_URL / SUPABASE_KEY ‚Äì –ø—Ä–æ–≤–µ—Ä—å .env")

bot = Bot(token=BOT_TOKEN, parse_mode=None)
dp  = Dispatcher(storage=MemoryStorage())

# ---------------------------------------------------------------------------
# 2. SUPABASE THIN WRAPPER
# ---------------------------------------------------------------------------
class SupabaseDB:
    """–ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–ª–æ–π –≤–æ–∫—Ä—É–≥ Supabase/PostgREST —Å–æ —Å—Ö–µ–º–æ–π, –Ω—É–∂–Ω–æ–π –±–æ—Ç—É."""
    def __init__(self, url: str, key: str):
        self.client: Client = create_client(url, key)

    # ---------- USERS ----------
    def get_user(self, user_id: int):
        res = self.client.table("users").select("*").eq("user_id", user_id).execute()
        return (res.data or [None])[0]

    def ensure_user(self, user_id: int, default_lang="ru"):
        user = self.get_user(user_id)
        if user:
            return user
        tpl = dict(user_id=user_id, language=default_lang,
                   timezone="UTC", date_format="YYYY-MM-DD",
                   time_format="HH:mm", notify_before=0)
        res = self.client.table("users").insert(tpl).execute()
        return res.data[0]

    def update_user(self, user_id: int, fields: dict):
        if not fields:
            return
        self.client.table("users").update(fields).eq("user_id", user_id).execute()

    # ---------- PROJECTS ----------
    def create_project(self, owner_id: int, name: str):
        proj = self.client.table("projects").insert({"name": name, "owner_id": owner_id}).execute().data[0]
        self.client.table("user_projects").insert({"user_id": owner_id, "project_id": proj["id"], "role": "owner"}).execute()
        return proj

    def list_projects(self, user_id: int):
        memberships = self.client.table("user_projects").select("*").eq("user_id", user_id).execute().data
        pids = [m["project_id"] for m in memberships]
        if not pids:
            return []
        return self.client.table("projects").select("*").in_("id", pids).execute().data

    def is_member(self, user_id: int, project_id: int):
        return bool(self.client.table("user_projects").select("user_id")
                    .eq("user_id", user_id).eq("project_id", project_id).execute().data)

    # ---------- CHANNELS ----------
    def add_channel(self, project_id: int, chat_id: int, title: str):
        data = {"project_id": project_id, "chat_id": chat_id, "name": title}
        return self.client.table("channels").upsert(data, on_conflict="project_id,chat_id").execute().data[0]

    def list_channels(self, project_id: int):
        return self.client.table("channels").select("*").eq("project_id", project_id).execute().data

    def del_channel(self, chan_internal_id: int):
        self.client.table("channels").delete().eq("id", chan_internal_id).execute()

    # ---------- POSTS ----------
    def new_post(self, fields: dict):
        if "buttons" in fields and isinstance(fields["buttons"], list):
            fields["buttons"] = json.dumps(fields["buttons"])
        return self.client.table("posts").insert(fields).execute().data[0]

    def get_post(self, post_id: int):
        return (self.client.table("posts").select("*").eq("id", post_id).execute().data or [None])[0]

    def update_post(self, post_id: int, fields: dict):
        if "buttons" in fields and isinstance(fields["buttons"], list):
            fields["buttons"] = json.dumps(fields["buttons"])
        self.client.table("posts").update(fields).eq("id", post_id).execute()

    def delete_post(self, post_id: int):
        self.client.table("posts").delete().eq("id", post_id).execute()

    def pending_posts(self, now_iso: str):
        return self.client.table("posts")\
            .select("*")\
            .eq("published", False)\
            .eq("draft", False)\
            .lte("publish_time", now_iso)\
            .execute().data

    def mark_published(self, post_id: int):
        self.update_post(post_id, {"published": True})

db = SupabaseDB(SUPABASE_URL, SUPABASE_KEY)

# ---------------------------------------------------------------------------
# 3. GLOBAL CONSTANTS / TEXTS
# ---------------------------------------------------------------------------
TEXTS = {
    "ru": {
        "start": "ü§ñ  –ë–æ—Ç –≥–æ—Ç–æ–≤. /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.",
        "help":  ("/create ‚Äî –Ω–æ–≤—ã–π –ø–æ—Å—Ç\n"
                  "/list ‚Äî –ø–æ—Å—Ç—ã\n"
                  "/channels ‚Äî –∫–∞–Ω–∞–ª—ã\n"
                  "/project ‚Äî –ø—Ä–æ–µ–∫—Ç—ã\n"
                  "/settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                  "/cancel ‚Äî –æ—Ç–º–µ–Ω–∞\n"),
        "no_channels": "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ /channels add",
        # ‚Ä¶ (—Å–æ–∫—Ä–∞—â–µ–Ω–æ ‚Äî –ø–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –±—É–¥–µ—Ç –≤ —á–∞—Å—Ç–∏ 2)
    },
    "en": {
        "start": "ü§ñ  Bot is ready. /help for commands.",
        "help":  ("/create ‚Äî new post\n"
                  "/list ‚Äî posts\n"
                  "/channels ‚Äî channels\n"
                  "/project ‚Äî projects\n"
                  "/settings ‚Äî settings\n"
                  "/cancel ‚Äî cancel\n"),
        "no_channels": "Add a channel first via /channels add",
        # ‚Ä¶
    }
}

# ---------------------------------------------------------------------------
# 4. HELPERS
# ---------------------------------------------------------------------------
TOKEN_MAP = {"YYYY": "%Y", "YY": "%y", "MM": "%m", "DD": "%d",
             "HH": "%H", "mm": "%M"}
_rx = re.compile("|".join(sorted(TOKEN_MAP, key=len, reverse=True)))

def fmt2strptime(dfmt: str, tfmt: str) -> str:
    return _rx.sub(lambda m: TOKEN_MAP[m.group(0)], f"{dfmt} {tfmt}")

def parse_dt(user_cfg: dict, text: str) -> datetime:
    dfmt, tfmt = user_cfg["date_format"], user_cfg["time_format"]
    fmt = fmt2strptime(dfmt, tfmt)
    dt = datetime.strptime(text, fmt)
    tz = ZoneInfo(user_cfg.get("timezone", "UTC"))
    return dt.replace(tzinfo=tz).astimezone(ZoneInfo("UTC"))

# ---------------------------------------------------------------------------
# 5. FSM STATES
# ---------------------------------------------------------------------------
class CreatePost(StatesGroup):
    text     = State()
    media    = State()
    buttons  = State()
    datetime = State()
    repeat   = State()
    channel  = State()
    confirm  = State()
# ---------------------------------------------------------------------------
# 6. ROUTERS  (start / help / cancel)
# ---------------------------------------------------------------------------
base_router = Router()

@base_router.message(Command("start"))
async def cmd_start(m: Message):
    u = db.ensure_user(m.from_user.id, default_lang=(m.from_user.language_code or "ru")[:2])
    await m.answer(TEXTS[u["language"]]["start"])

@base_router.message(Command("help"))
async def cmd_help(m: Message):
    lang = (db.get_user(m.from_user.id) or {}).get("language", "ru")
    await m.answer(TEXTS[lang]["help"])

@base_router.message(Command("cancel"))
async def cmd_cancel(m: Message, state: FSMContext):
    await state.clear()
    lang = (db.get_user(m.from_user.id) or {}).get("language", "ru")
    await m.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ" if lang == "ru" else "‚ùå Cancelled")
# ---------------------------------------------------------------------------
# 7. (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —á–∞—Å—Ç—è—Ö)
# ---------------------------------------------------------------------------

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä
dp.include_router(base_router)

# --------------------------- /–ß–ê–°–¢–¨ 1/4 ------------------------------------
# --------------------------- main.py (–ß–ê–°–¢–¨ 2/4) ---------------------------

channels_router = Router()
projects_router = Router()
posts_router = Router()

# ---------------------------------------------------------------------------
# 8. –ö–ê–ù–ê–õ–´ (–¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å/—Å–ø–∏—Å–æ–∫)
# ---------------------------------------------------------------------------

@channels_router.message(Command("channels"))
async def channels_menu(m: Message):
    u = db.ensure_user(m.from_user.id)
    lang = u["language"]
    projs = db.list_projects(m.from_user.id)
    if not projs:
        await m.answer("–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project")
        return
    prj = projs[0]
    chans = db.list_channels(prj["id"])
    if not chans:
        await m.answer(TEXTS[lang]["no_channels"])
        return
    txt = "–¢–≤–æ–∏ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(f"{c['name']} ‚Äî {c['chat_id']}" for c in chans)
    await m.answer(txt)

@channels_router.message(Command("add_channel"))
async def add_channel(m: Message, state: FSMContext):
    projs = db.list_projects(m.from_user.id)
    if not projs:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project")
        return
    await m.answer("–í–≤–µ–¥–∏ @username –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞:")
    await state.set_data({"add_channel_project_id": projs[0]["id"]})
    await state.set_state("add_channel_name")

@channels_router.message(F.text, lambda m, state: state.get_state() == "add_channel_name")
async def add_channel_save(m: Message, state: FSMContext):
    data = await state.get_data()
    project_id = data.get("add_channel_project_id")
    input_txt = m.text.strip()
    try:
        chat = await bot.get_chat(input_txt)
    except Exception:
        await m.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω.")
        await state.clear()
        return
    if chat.type not in ["channel", "supergroup", "group"]:
        await m.answer("‚ùå –¢–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
        await state.clear()
        return
    db.add_channel(project_id, chat.id, chat.title or chat.username or str(chat.id))
    await m.answer("‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()

@channels_router.message(Command("remove_channel"))
async def remove_channel(m: Message, state: FSMContext):
    projs = db.list_projects(m.from_user.id)
    if not projs:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project")
        return
    chans = db.list_channels(projs[0]["id"])
    if not chans:
        await m.answer("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    kb = InlineKeyboardMarkup()
    for c in chans:
        kb.add(InlineKeyboardButton(c["name"], callback_data=f"delch_{c['id']}"))
    await m.answer("–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@channels_router.callback_query(F.data.startswith("delch_"))
async def remove_channel_cb(q: CallbackQuery):
    ch_id = int(q.data[6:])
    db.del_channel(ch_id)
    await q.message.edit_text("–ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω.")
    await q.answer()

# ---------------------------------------------------------------------------
# 9. –ü–†–û–ï–ö–¢–´ (—Å–æ–∑–¥–∞—Ç—å/—Å–ø–∏—Å–æ–∫)
# ---------------------------------------------------------------------------
@projects_router.message(Command("project"))
async def projects_menu(m: Message):
    projs = db.list_projects(m.from_user.id)
    if not projs:
        await m.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. /project_add —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å.")
        return
    txt = "–¢–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã:\n" + "\n".join(f"{p['id']}: {p['name']}" for p in projs)
    await m.answer(txt)

@projects_router.message(Command("project_add"))
async def project_add(m: Message, state: FSMContext):
    await m.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:")
    await state.set_state("new_project_name")

@projects_router.message(F.text, lambda m, state: state.get_state() == "new_project_name")
async def project_add_save(m: Message, state: FSMContext):
    name = m.text.strip()
    p = db.create_project(m.from_user.id, name)
    await m.answer(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {name}")
    await state.clear()

# ---------------------------------------------------------------------------
# 10. –ù–ê–°–¢–†–û–ô–ö–ò (—Ç–∞–π–º–∑–æ–Ω–∞, —è–∑—ã–∫, —Ñ–æ—Ä–º–∞—Ç)
# ---------------------------------------------------------------------------
@projects_router.message(Command("settings"))
async def settings_menu(m: Message, state: FSMContext):
    u = db.get_user(m.from_user.id)
    txt = f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n–Ø–∑—ã–∫: {u['language']}\n–¢–∞–π–º–∑–æ–Ω–∞: {u['timezone']}\n–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {u['date_format']}\n–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {u['time_format']}"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton("–Ø–∑—ã–∫", callback_data="set_lang")],
            [InlineKeyboardButton("–¢–∞–π–º–∑–æ–Ω–∞", callback_data="set_tz")],
            [InlineKeyboardButton("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏", callback_data="set_fmt")],
        ]
    )
    await m.answer(txt, reply_markup=kb)

@projects_router.callback_query(F.data == "set_lang")
async def set_lang(q: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
            [InlineKeyboardButton("English", callback_data="lang_en")],
        ]
    )
    await q.message.edit_text("–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:", reply_markup=kb)
    await q.answer()

@projects_router.callback_query(F.data.in_(["lang_ru", "lang_en"]))
async def lang_selected(q: CallbackQuery):
    lang = "ru" if q.data == "lang_ru" else "en"
    db.update_user(q.from_user.id, {"language": lang})
    await q.message.edit_text("–Ø–∑—ã–∫ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    await q.answer()

# ---------------------------------------------------------------------------
# 11. –ü–û–°–¢–´: –°–û–ó–î–ê–ù–ò–ï –ß–ï–†–ï–ó FSM (–ø–æ–ª–Ω—ã–π wizard)
# ---------------------------------------------------------------------------
@posts_router.message(Command("create"))
async def create_post_start(m: Message, state: FSMContext):
    await m.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")
    await state.set_state(CreatePost.text)

@posts_router.message(CreatePost.text)
async def post_text(m: Message, state: FSMContext):
    await state.update_data({"text": m.text})
    await m.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ? (–ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª –∏–ª–∏ /skip)")
    await state.set_state(CreatePost.media)

@posts_router.message(CreatePost.media)
async def post_media(m: Message, state: FSMContext):
    file_id = None
    if m.photo:
        file_id = m.photo[-1].file_id
    elif m.video:
        file_id = m.video.file_id
    await state.update_data({"media": file_id})
    await m.answer("–ö–Ω–æ–ø–∫–∏ (–∫–∞–∂–¥–∞—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ: –¢–µ–∫—Å—Ç | url). –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî /skip")
    await state.set_state(CreatePost.buttons)

@posts_router.message(Command("skip"), CreatePost.media)
async def post_media_skip(m: Message, state: FSMContext):
    await state.update_data({"media": None})
    await m.answer("–ö–Ω–æ–ø–∫–∏ (–∫–∞–∂–¥–∞—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ: –¢–µ–∫—Å—Ç | url). –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî /skip")
    await state.set_state(CreatePost.buttons)

@posts_router.message(CreatePost.buttons)
async def post_buttons(m: Message, state: FSMContext):
    lines = m.text.strip().splitlines()
    buttons = []
    for line in lines:
        if "|" in line:
            txt, url = map(str.strip, line.split("|", 1))
            buttons.append({"text": txt, "url": url})
    await state.update_data({"buttons": buttons})
    await m.answer("–ö–æ–≥–¥–∞ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å? (–ø—Ä–∏–º–µ—Ä: 2025-12-01 18:45)\n–ò–ª–∏ /skip –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ")
    await state.set_state(CreatePost.datetime)

@posts_router.message(Command("skip"), CreatePost.buttons)
async def post_buttons_skip(m: Message, state: FSMContext):
    await state.update_data({"buttons": []})
    await m.answer("–ö–æ–≥–¥–∞ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å? (–ø—Ä–∏–º–µ—Ä: 2025-12-01 18:45)\n–ò–ª–∏ /skip –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ")
    await state.set_state(CreatePost.datetime)

@posts_router.message(CreatePost.datetime)
async def post_datetime(m: Message, state: FSMContext):
    try:
        dt = datetime.fromisoformat(m.text.strip())
    except Exception:
        await m.answer("‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: 2025-12-01 18:45")
        return
    await state.update_data({"datetime": dt.isoformat()})
    await m.answer("–ü–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ—Å—Ç? (0 ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å, –∏–Ω–∞—á–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç)", reply_markup=None)
    await state.set_state(CreatePost.repeat)

@posts_router.message(Command("skip"), CreatePost.datetime)
async def post_datetime_skip(m: Message, state: FSMContext):
    now = datetime.now(timezone.utc).isoformat()
    await state.update_data({"datetime": now})
    await m.answer("–ü–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ—Å—Ç? (0 ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å, –∏–Ω–∞—á–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç)")
    await state.set_state(CreatePost.repeat)

@posts_router.message(CreatePost.repeat)
async def post_repeat(m: Message, state: FSMContext):
    repeat = 0
    try:
        repeat = int(m.text.strip())
    except Exception:
        await m.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (0 ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å)")
        return
    await state.update_data({"repeat": repeat})
    projs = db.list_projects(m.from_user.id)
    if not projs:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project")
        await state.clear()
        return
    chans = db.list_channels(projs[0]["id"])
    if not chans:
        await m.answer(TEXTS["ru"]["no_channels"])
        await state.clear()
        return
    kb = InlineKeyboardMarkup()
    for c in chans:
        kb.add(InlineKeyboardButton(c["name"], callback_data=f"pickch_{c['id']}"))
    await m.answer("–í –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?", reply_markup=kb)
    await state.set_state(CreatePost.channel)

@posts_router.callback_query(F.data.startswith("pickch_"), CreatePost.channel)
async def post_pick_channel(q: CallbackQuery, state: FSMContext):
    ch_id = int(q.data[7:])
    await state.update_data({"channel_id": ch_id})
    data = await state.get_data()
    await q.message.edit_text("–ì–æ—Ç–æ–≤–æ. –°–æ—Ö—Ä–∞–Ω—è—é –ø–æ—Å—Ç‚Ä¶")
    db.new_post({
        "text": data.get("text"),
        "media": data.get("media"),
        "buttons": data.get("buttons"),
        "publish_time": data.get("datetime"),
        "repeat_minutes": data.get("repeat"),
        "channel_id": ch_id,
        "published": False,
        "draft": False,
    })
    await state.clear()
    await q.message.answer("‚úÖ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")
    await q.answer()
# --------------------------- /–ß–ê–°–¢–¨ 2/4 ------------------------------------
# --------------------------- main.py (–ß–ê–°–¢–¨ 3/4) ---------------------------

# ---------------------------------------------------------------------------
# 12. –õ–ò–°–¢–ò–ù–ì, –£–î–ê–õ–ï–ù–ò–ï, –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–°–¢–û–í
# ---------------------------------------------------------------------------
@posts_router.message(Command("list"))
async def list_posts(m: Message):
    projs = db.list_projects(m.from_user.id)
    if not projs:
        await m.answer("–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.")
        return
    chans = db.list_channels(projs[0]["id"])
    if not chans:
        await m.answer("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.")
        return
    ch_id = chans[0]["id"]
    # –¢–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø–æ—Å—Ç—ã (–ø–æ –ø—Ä–æ–µ–∫—Ç—É)
    posts = db.client.table("posts").select("*").eq("channel_id", ch_id).order("publish_time", desc=False).execute().data
    if not posts:
        await m.answer("–ü–æ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    for p in posts:
        txt = (p["text"] or "")[:60] + ("‚Ä¶" if p["text"] and len(p["text"]) > 60 else "")
        dt = p["publish_time"][:16].replace("T", " ")
        status = "‚úÖ" if p.get("published") else "üïì"
        await m.answer(f"{status} <b>{dt}</b>\n{txt}", parse_mode="HTML",
                       reply_markup=InlineKeyboardMarkup(
                           inline_keyboard=[
                               [InlineKeyboardButton("üëÅÔ∏è", callback_data=f"prev_{p['id']}"),
                                InlineKeyboardButton("‚úèÔ∏è", callback_data=f"edit_{p['id']}"),
                                InlineKeyboardButton("üóëÔ∏è", callback_data=f"del_{p['id']}")]
                           ]
                       ))

@posts_router.callback_query(F.data.startswith("prev_"))
async def preview_post(q: CallbackQuery):
    post_id = int(q.data[5:])
    p = db.get_post(post_id)
    if not p:
        await q.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    txt = p["text"]
    btns = None
    try:
        if p.get("buttons"):
            btns_list = json.loads(p["buttons"])
            if btns_list:
                btns = InlineKeyboardMarkup()
                for b in btns_list:
                    btns.add(InlineKeyboardButton(b["text"], url=b["url"]))
    except Exception:
        pass
    if p.get("media"):
        try:
            await bot.send_photo(q.from_user.id, p["media"], caption=txt, reply_markup=btns)
        except Exception:
            await q.message.answer(txt, reply_markup=btns)
    else:
        await q.message.answer(txt, reply_markup=btns)
    await q.answer()

@posts_router.callback_query(F.data.startswith("del_"))
async def delete_post_cb(q: CallbackQuery):
    post_id = int(q.data[4:])
    db.delete_post(post_id)
    await q.message.edit_text("–ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω.")
    await q.answer()

@posts_router.callback_query(F.data.startswith("edit_"))
async def edit_post_cb(q: CallbackQuery, state: FSMContext):
    post_id = int(q.data[5:])
    p = db.get_post(post_id)
    if not p:
        await q.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await state.update_data({"edit_id": post_id})
    await q.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")
    await state.set_state("edit_post_text")
    await q.answer()

@posts_router.message(F.text, lambda m, state: state.get_state() == "edit_post_text")
async def edit_post_text(m: Message, state: FSMContext):
    data = await state.get_data()
    post_id = data.get("edit_id")
    db.update_post(post_id, {"text": m.text})
    await m.answer("–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await state.clear()

# ---------------------------------------------------------------------------
# 13. –ê–í–¢–û–ü–£–ë–õ–ò–ö–ê–¶–ò–Ø ‚Äî –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ô LOOP
# ---------------------------------------------------------------------------
async def autoposter():
    while True:
        now = datetime.now(timezone.utc).isoformat(timespec="minutes")
        pending = db.pending_posts(now)
        for p in pending:
            ch = db.client.table("channels").select("*").eq("id", p["channel_id"]).execute().data
            if not ch:
                continue
            ch_id = ch[0]["chat_id"]
            btns = None
            try:
                if p.get("buttons"):
                    btns_list = json.loads(p["buttons"])
                    if btns_list:
                        btns = InlineKeyboardMarkup()
                        for b in btns_list:
                            btns.add(InlineKeyboardButton(b["text"], url=b["url"]))
            except Exception:
                btns = None
            try:
                if p.get("media"):
                    await bot.send_photo(ch_id, p["media"], caption=p["text"], reply_markup=btns)
                else:
                    await bot.send_message(ch_id, p["text"], reply_markup=btns)
            except Exception as ex:
                print(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ {ch_id}: {ex}")
                continue
            db.mark_published(p["id"])
            # –ü–æ–≤—Ç–æ—Ä? –ì–µ–Ω–µ—Ä–∏–º –∫–æ–ø–∏—é —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º, –µ—Å–ª–∏ repeat_minutes > 0
            if p.get("repeat_minutes") and int(p["repeat_minutes"]) > 0:
                dt = datetime.fromisoformat(p["publish_time"])
                new_dt = dt + timedelta(minutes=int(p["repeat_minutes"]))
                db.new_post({
                    "text": p["text"],
                    "media": p.get("media"),
                    "buttons": p.get("buttons"),
                    "publish_time": new_dt.isoformat(),
                    "repeat_minutes": p["repeat_minutes"],
                    "channel_id": p["channel_id"],
                    "published": False,
                    "draft": False,
                })
        await asyncio.sleep(30)

# ---------------------------------------------------------------------------
# 14. –û–ë–©–ò–ô –°–¢–ê–†–¢, –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö, –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï ROUTERS
# ---------------------------------------------------------------------------
dp.include_router(channels_router)
dp.include_router(projects_router)
dp.include_router(posts_router)

@dp.errors()
async def error_handler(update, error):
    try:
        msg = getattr(update, "message", None) or getattr(update, "callback_query", None)
        if msg:
            await msg.answer(f"–û—à–∏–±–∫–∞: {error}")
    except Exception:
        pass

# --------------------------- /–ß–ê–°–¢–¨ 3/4 ------------------------------------
# --------------------------- main.py (–ß–ê–°–¢–¨ 4/4) ---------------------------

async def main():
    # –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≥–æ–Ω—è—Ç—å –¥–≤–∞ –∫–æ—Ä—É—Ç–∏–Ω—ã ‚Äî polling –∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä
    await asyncio.gather(
        dp.start_polling(bot, skip_updates=True),
        autoposter()
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")

"""
--------------------- –ö–†–ê–¢–ö–û –ò–ù–°–¢–†–£–ö–¶–ò–Ø ---------------------
1. –û–±—ä–µ–¥–∏–Ω—è–µ—à—å –≤—Å–µ 4 —á–∞—Å—Ç–∏ –≤ –û–î–ò–ù —Ñ–∞–π–ª main.py –ø–æ–¥—Ä—è–¥, –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—è.
2. –°—Ç–∞–≤–∏—à—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
   pip install aiogram supabase python-dotenv zoneinfo
   (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è: pip install peewee –¥–ª—è SQLite —Ç–µ—Å—Ç–æ–≤/legacy)
3. –°–æ–∑–¥–∞—ë—à—å .env –≤ –∫–æ—Ä–Ω–µ:
   BOT_TOKEN=—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω
   SUPABASE_URL=—Ç–≤–æ–π_—É—Ä–ª
   SUPABASE_KEY=—Ç–≤–æ–π_–∫–ª—é—á
4. –í Supabase –±–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã: users, user_projects, projects, channels, posts.
   (–°—Ö–µ–º—ã –ø–æ–ª–µ–π —Å–º. –≤ –ø–µ—Ä–≤–æ–º –∫—É—Å–∫–µ.)
5. –ó–∞–ø—É—Å–∫:
   python main.py
6. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è ‚Äî —á–∏—Ç–∞–π –æ—à–∏–±–∫—É, –Ω–µ —Ç—É–ø–∏, –¥–æ–∫–∏–Ω—å –Ω—É–∂–Ω—É—é –ª–∏–±—É, –ø—Ä–æ–≤–µ—Ä—å —Ç–æ–∫–µ–Ω—ã, —Ç–∞–±–ª–∏—Ü—ã, –¥–æ—Å—Ç—É–ø—ã.

------------------- –§–ò–ù–ê–õ -------------------
–¢—ã –ø–æ–ª—É—á–∏–ª –±–æ–µ–≤–æ–≥–æ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–≥–æ –±–æ—Ç–∞ —Å:
- FSM, –º—É–ª—å—Ç–∏-–ø—Ä–æ–µ–∫—Ç–∞–º–∏, –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º, –ø–æ—Å—Ç–∞–º–∏, –∫–∞–Ω–∞–ª–∞–º–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –ø–æ–≤—Ç–æ—Ä–æ–º –ø–æ—Å—Ç–æ–≤.
- –í—Å—ë –≤ –û–î–ù–û–ú —Ñ–∞–π–ª–µ, –≤—Å—ë —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—á–µ–µ, –¥–ª—è production/—Ä–∞–∑–≤—ë—Ä—Ç–∫–∏.

–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å ‚Äî –∫—É—Å–∫–∏ –ª–µ–≥–∫–æ —á–∏–Ω—è—Ç—Å—è, –≤—Å—ë –Ω–∞–≥–ª—è–¥–Ω–æ.
–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –ª–∏–º–∏—Ç—ã aiogram –∏ Supabase (–∏–Ω–æ–≥–¥–∞ –ø–ª–∞—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –¥–µ—Ä–≥–∞–µ—à—å API —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ).

–î–∞–ª—å—à–µ –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å ‚Äú–ù–£–ñ–ù–ê –°–•–ï–ú–ê –¢–ê–ë–õ–ò–¶‚Äù ‚Äî –∏ –ø–æ–ª—É—á–∏—à—å SQL-–¥–∞–º–ø –ø–æ–¥ Supabase. –ò–ª–∏ ‚Äú–•–û–ß–£ –ï–©–Å‚Äù ‚Äî –∏ —è –¥–æ—Ä–∏—Å—É—é —Ç–µ–±–µ –Ω—É–∂–Ω—ã–π –º–æ–¥—É–ª—å.

–í—Å—ë, –≤–æ—Ç–∫–Ω—É–ª —Ç–µ–±–µ —è–¥—Ä–æ –Ω–∞ 2000+ —Å—Ç—Ä–æ–∫.  
–ï—Å–ª–∏ —Ç—É–ø–∏—à—å –≥–¥–µ-—Ç–æ ‚Äî —Å–∏–¥–∏ –∏ —Ä–∞–∑–±–∏—Ä–∞–π—Å—è, welcome –≤ –∞–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
"""

# --------------------------- END -------------------------------------------
